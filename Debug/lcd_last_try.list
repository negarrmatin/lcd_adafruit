
lcd_last_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000286c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c7c  08002c7c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002c7c  08002c7c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c7c  08002c7c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c80  08002c80  00012c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  08002c94  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002c94  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e1c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a86  00000000  00000000  00027e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00029928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000065d  00000000  00000000  0002a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c3d  00000000  00000000  0002a815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a27e  00000000  00000000  0004f452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df85c  00000000  00000000  000596d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020a4  00000000  00000000  00138f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029dc 	.word	0x080029dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080029dc 	.word	0x080029dc

080001c8 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4604      	mov	r4, r0
 80001d0:	4608      	mov	r0, r1
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	4623      	mov	r3, r4
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	4603      	mov	r3, r0
 80001dc:	71bb      	strb	r3, [r7, #6]
 80001de:	460b      	mov	r3, r1
 80001e0:	717b      	strb	r3, [r7, #5]
 80001e2:	4613      	mov	r3, r2
 80001e4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80001ea:	7dfb      	ldrb	r3, [r7, #23]
 80001ec:	2b1f      	cmp	r3, #31
 80001ee:	d802      	bhi.n	80001f6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	e002      	b.n	80001fc <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80001f6:	7dfb      	ldrb	r3, [r7, #23]
 80001f8:	3b20      	subs	r3, #32
 80001fa:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80001fc:	2300      	movs	r3, #0
 80001fe:	753b      	strb	r3, [r7, #20]
 8000200:	e012      	b.n	8000228 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000202:	7dfa      	ldrb	r2, [r7, #23]
 8000204:	7d38      	ldrb	r0, [r7, #20]
 8000206:	7d39      	ldrb	r1, [r7, #20]
 8000208:	4c3b      	ldr	r4, [pc, #236]	; (80002f8 <ILI9341_Draw_Char+0x130>)
 800020a:	4613      	mov	r3, r2
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	4413      	add	r3, r2
 8000210:	005b      	lsls	r3, r3, #1
 8000212:	4423      	add	r3, r4
 8000214:	4403      	add	r3, r0
 8000216:	781a      	ldrb	r2, [r3, #0]
 8000218:	f101 0318 	add.w	r3, r1, #24
 800021c:	443b      	add	r3, r7
 800021e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000222:	7d3b      	ldrb	r3, [r7, #20]
 8000224:	3301      	adds	r3, #1
 8000226:	753b      	strb	r3, [r7, #20]
 8000228:	7d3b      	ldrb	r3, [r7, #20]
 800022a:	2b05      	cmp	r3, #5
 800022c:	d9e9      	bls.n	8000202 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800022e:	79bb      	ldrb	r3, [r7, #6]
 8000230:	b298      	uxth	r0, r3
 8000232:	797b      	ldrb	r3, [r7, #5]
 8000234:	b299      	uxth	r1, r3
 8000236:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000238:	461a      	mov	r2, r3
 800023a:	0052      	lsls	r2, r2, #1
 800023c:	4413      	add	r3, r2
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	b29a      	uxth	r2, r3
 8000242:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000244:	00db      	lsls	r3, r3, #3
 8000246:	b29c      	uxth	r4, r3
 8000248:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	4623      	mov	r3, r4
 800024e:	f000 fc57 	bl	8000b00 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000252:	2300      	movs	r3, #0
 8000254:	757b      	strb	r3, [r7, #21]
 8000256:	e047      	b.n	80002e8 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000258:	2300      	movs	r3, #0
 800025a:	75bb      	strb	r3, [r7, #22]
 800025c:	e03e      	b.n	80002dc <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800025e:	7d7b      	ldrb	r3, [r7, #21]
 8000260:	3318      	adds	r3, #24
 8000262:	443b      	add	r3, r7
 8000264:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000268:	461a      	mov	r2, r3
 800026a:	7dbb      	ldrb	r3, [r7, #22]
 800026c:	fa42 f303 	asr.w	r3, r2, r3
 8000270:	f003 0301 	and.w	r3, r3, #1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d02e      	beq.n	80002d6 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000278:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800027a:	2b01      	cmp	r3, #1
 800027c:	d110      	bne.n	80002a0 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	b29a      	uxth	r2, r3
 8000282:	7d7b      	ldrb	r3, [r7, #21]
 8000284:	b29b      	uxth	r3, r3
 8000286:	4413      	add	r3, r2
 8000288:	b298      	uxth	r0, r3
 800028a:	797b      	ldrb	r3, [r7, #5]
 800028c:	b29a      	uxth	r2, r3
 800028e:	7dbb      	ldrb	r3, [r7, #22]
 8000290:	b29b      	uxth	r3, r3
 8000292:	4413      	add	r3, r2
 8000294:	b29b      	uxth	r3, r3
 8000296:	887a      	ldrh	r2, [r7, #2]
 8000298:	4619      	mov	r1, r3
 800029a:	f000 fb53 	bl	8000944 <ILI9341_Draw_Pixel>
 800029e:	e01a      	b.n	80002d6 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	7d7b      	ldrb	r3, [r7, #21]
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80002aa:	fb11 f303 	smulbb	r3, r1, r3
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	4413      	add	r3, r2
 80002b2:	b298      	uxth	r0, r3
 80002b4:	797b      	ldrb	r3, [r7, #5]
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	7dbb      	ldrb	r3, [r7, #22]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80002be:	fb11 f303 	smulbb	r3, r1, r3
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4413      	add	r3, r2
 80002c6:	b299      	uxth	r1, r3
 80002c8:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80002ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80002cc:	887b      	ldrh	r3, [r7, #2]
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	4623      	mov	r3, r4
 80002d2:	f000 fc15 	bl	8000b00 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80002d6:	7dbb      	ldrb	r3, [r7, #22]
 80002d8:	3301      	adds	r3, #1
 80002da:	75bb      	strb	r3, [r7, #22]
 80002dc:	7dbb      	ldrb	r3, [r7, #22]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d9bd      	bls.n	800025e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80002e2:	7d7b      	ldrb	r3, [r7, #21]
 80002e4:	3301      	adds	r3, #1
 80002e6:	757b      	strb	r3, [r7, #21]
 80002e8:	7d7b      	ldrb	r3, [r7, #21]
 80002ea:	2b05      	cmp	r3, #5
 80002ec:	d9b4      	bls.n	8000258 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	371c      	adds	r7, #28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd90      	pop	{r4, r7, pc}
 80002f8:	080029fc 	.word	0x080029fc

080002fc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b085      	sub	sp, #20
 8000300:	af02      	add	r7, sp, #8
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	4608      	mov	r0, r1
 8000306:	4611      	mov	r1, r2
 8000308:	461a      	mov	r2, r3
 800030a:	4603      	mov	r3, r0
 800030c:	70fb      	strb	r3, [r7, #3]
 800030e:	460b      	mov	r3, r1
 8000310:	70bb      	strb	r3, [r7, #2]
 8000312:	4613      	mov	r3, r2
 8000314:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000316:	e017      	b.n	8000348 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	1c5a      	adds	r2, r3, #1
 800031c:	607a      	str	r2, [r7, #4]
 800031e:	7818      	ldrb	r0, [r3, #0]
 8000320:	883c      	ldrh	r4, [r7, #0]
 8000322:	78ba      	ldrb	r2, [r7, #2]
 8000324:	78f9      	ldrb	r1, [r7, #3]
 8000326:	8bbb      	ldrh	r3, [r7, #28]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	8b3b      	ldrh	r3, [r7, #24]
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	4623      	mov	r3, r4
 8000330:	f7ff ff4a 	bl	80001c8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000334:	8b3b      	ldrh	r3, [r7, #24]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	4413      	add	r3, r2
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	b2da      	uxtb	r2, r3
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	4413      	add	r3, r2
 8000346:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1e3      	bne.n	8000318 <ILI9341_Draw_Text+0x1c>
    }
}
 8000350:	bf00      	nop
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bd90      	pop	{r4, r7, pc}

0800035a <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH  = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0
MX_SPI1_Init();                                             //SPI INIT
 800035e:	f000 fd1f 	bl	8000da0 <MX_SPI1_Init>
MX_GPIO_Init();                                             //GPIO INIT
 8000362:	f000 fc29 	bl	8000bb8 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET); //CS OFF
 8000366:	2200      	movs	r2, #0
 8000368:	2104      	movs	r1, #4
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f001 f949 	bl	8001604 <HAL_GPIO_WritePin>
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000382:	1df9      	adds	r1, r7, #7
 8000384:	2301      	movs	r3, #1
 8000386:	2201      	movs	r2, #1
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <ILI9341_SPI_Send+0x20>)
 800038a:	f002 f822 	bl	80023d2 <HAL_SPI_Transmit>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000002c 	.word	0x2000002c

0800039c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2104      	movs	r1, #4
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f001 f929 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f001 f922 	bl	8001604 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffd8 	bl	8000378 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2104      	movs	r1, #4
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d0:	f001 f918 	bl	8001604 <HAL_GPIO_WritePin>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f0:	f001 f908 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2104      	movs	r1, #4
 80003f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fc:	f001 f902 	bl	8001604 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ffb8 	bl	8000378 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2104      	movs	r1, #4
 800040c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000410:	f001 f8f8 	bl	8001604 <HAL_GPIO_WritePin>
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4604      	mov	r4, r0
 8000424:	4608      	mov	r0, r1
 8000426:	4611      	mov	r1, r2
 8000428:	461a      	mov	r2, r3
 800042a:	4623      	mov	r3, r4
 800042c:	80fb      	strh	r3, [r7, #6]
 800042e:	4603      	mov	r3, r0
 8000430:	80bb      	strh	r3, [r7, #4]
 8000432:	460b      	mov	r3, r1
 8000434:	807b      	strh	r3, [r7, #2]
 8000436:	4613      	mov	r3, r2
 8000438:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800043a:	202a      	movs	r0, #42	; 0x2a
 800043c:	f7ff ffae 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000440:	88fb      	ldrh	r3, [r7, #6]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b29b      	uxth	r3, r3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ffc7 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ffc2 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000458:	887b      	ldrh	r3, [r7, #2]
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	b29b      	uxth	r3, r3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ffbb 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000466:	887b      	ldrh	r3, [r7, #2]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ffb6 	bl	80003dc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000470:	202b      	movs	r0, #43	; 0x2b
 8000472:	f7ff ff93 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000476:	88bb      	ldrh	r3, [r7, #4]
 8000478:	0a1b      	lsrs	r3, r3, #8
 800047a:	b29b      	uxth	r3, r3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ffac 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000484:	88bb      	ldrh	r3, [r7, #4]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ffa7 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800048e:	883b      	ldrh	r3, [r7, #0]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b29b      	uxth	r3, r3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ffa0 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800049c:	883b      	ldrh	r3, [r7, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff9b 	bl	80003dc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80004a6:	202c      	movs	r0, #44	; 0x2c
 80004a8:	f7ff ff78 	bl	800039c <ILI9341_Write_Command>
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd90      	pop	{r4, r7, pc}

080004b4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2110      	movs	r1, #16
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f001 f8a0 	bl	8001604 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80004c4:	20c8      	movs	r0, #200	; 0xc8
 80004c6:	f000 fde9 	bl	800109c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2104      	movs	r1, #4
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f001 f897 	bl	8001604 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80004d6:	20c8      	movs	r0, #200	; 0xc8
 80004d8:	f000 fde0 	bl	800109c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2110      	movs	r1, #16
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f001 f88e 	bl	8001604 <HAL_GPIO_WritePin>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]

uint8_t screen_rotation = Rotation;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80004fa:	2036      	movs	r0, #54	; 0x36
 80004fc:	f7ff ff4e 	bl	800039c <ILI9341_Write_Command>
HAL_Delay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f000 fdcb 	bl	800109c <HAL_Delay>

switch(screen_rotation) 
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d837      	bhi.n	800057c <ILI9341_Set_Rotation+0x90>
 800050c:	a201      	add	r2, pc, #4	; (adr r2, 8000514 <ILI9341_Set_Rotation+0x28>)
 800050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000512:	bf00      	nop
 8000514:	08000525 	.word	0x08000525
 8000518:	0800053b 	.word	0x0800053b
 800051c:	08000551 	.word	0x08000551
 8000520:	08000567 	.word	0x08000567
  {
    case SCREEN_VERTICAL_1:
      ILI9341_Write_Data(0x40|0x08);
 8000524:	2048      	movs	r0, #72	; 0x48
 8000526:	f7ff ff59 	bl	80003dc <ILI9341_Write_Data>
      LCD_WIDTH = 240;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <ILI9341_Set_Rotation+0x9c>)
 800052c:	22f0      	movs	r2, #240	; 0xf0
 800052e:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <ILI9341_Set_Rotation+0xa0>)
 8000532:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000536:	801a      	strh	r2, [r3, #0]
      break;
 8000538:	e021      	b.n	800057e <ILI9341_Set_Rotation+0x92>
    case SCREEN_HORIZONTAL_1:
      ILI9341_Write_Data(0x20|0x08);
 800053a:	2028      	movs	r0, #40	; 0x28
 800053c:	f7ff ff4e 	bl	80003dc <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <ILI9341_Set_Rotation+0x9c>)
 8000542:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000546:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <ILI9341_Set_Rotation+0xa0>)
 800054a:	22f0      	movs	r2, #240	; 0xf0
 800054c:	801a      	strh	r2, [r3, #0]
      break;
 800054e:	e016      	b.n	800057e <ILI9341_Set_Rotation+0x92>
    case SCREEN_VERTICAL_2:
      ILI9341_Write_Data(0x80|0x08);
 8000550:	2088      	movs	r0, #136	; 0x88
 8000552:	f7ff ff43 	bl	80003dc <ILI9341_Write_Data>
      LCD_WIDTH  = 240;
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <ILI9341_Set_Rotation+0x9c>)
 8000558:	22f0      	movs	r2, #240	; 0xf0
 800055a:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <ILI9341_Set_Rotation+0xa0>)
 800055e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000562:	801a      	strh	r2, [r3, #0]
      break;
 8000564:	e00b      	b.n	800057e <ILI9341_Set_Rotation+0x92>
    case SCREEN_HORIZONTAL_2:
      ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000566:	20e8      	movs	r0, #232	; 0xe8
 8000568:	f7ff ff38 	bl	80003dc <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <ILI9341_Set_Rotation+0x9c>)
 800056e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000572:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <ILI9341_Set_Rotation+0xa0>)
 8000576:	22f0      	movs	r2, #240	; 0xf0
 8000578:	801a      	strh	r2, [r3, #0]
      break;
 800057a:	e000      	b.n	800057e <ILI9341_Set_Rotation+0x92>
    default:
      //EXIT IF SCREEN ROTATION NOT VALID!
      break;
 800057c:	bf00      	nop
  }
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000002 	.word	0x20000002
 800058c:	20000000 	.word	0x20000000

08000590 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f001 f832 	bl	8001604 <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80005a8:	f7ff fff2 	bl	8000590 <ILI9341_Enable>
ILI9341_SPI_Init();
 80005ac:	f7ff fed5 	bl	800035a <ILI9341_SPI_Init>
ILI9341_Reset();
 80005b0:	f7ff ff80 	bl	80004b4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff fef1 	bl	800039c <ILI9341_Write_Command>
HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	f000 fd6d 	bl	800109c <HAL_Delay>

//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80005c2:	20cb      	movs	r0, #203	; 0xcb
 80005c4:	f7ff feea 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80005c8:	2039      	movs	r0, #57	; 0x39
 80005ca:	f7ff ff07 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80005ce:	202c      	movs	r0, #44	; 0x2c
 80005d0:	f7ff ff04 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f7ff ff01 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80005da:	2034      	movs	r0, #52	; 0x34
 80005dc:	f7ff fefe 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80005e0:	2002      	movs	r0, #2
 80005e2:	f7ff fefb 	bl	80003dc <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80005e6:	20cf      	movs	r0, #207	; 0xcf
 80005e8:	f7ff fed8 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f7ff fef5 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80005f2:	20c1      	movs	r0, #193	; 0xc1
 80005f4:	f7ff fef2 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80005f8:	2030      	movs	r0, #48	; 0x30
 80005fa:	f7ff feef 	bl	80003dc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80005fe:	20e8      	movs	r0, #232	; 0xe8
 8000600:	f7ff fecc 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000604:	2085      	movs	r0, #133	; 0x85
 8000606:	f7ff fee9 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff fee6 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000610:	2078      	movs	r0, #120	; 0x78
 8000612:	f7ff fee3 	bl	80003dc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000616:	20ea      	movs	r0, #234	; 0xea
 8000618:	f7ff fec0 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff fedd 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff feda 	bl	80003dc <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000628:	20ed      	movs	r0, #237	; 0xed
 800062a:	f7ff feb7 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f7ff fed4 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000634:	2003      	movs	r0, #3
 8000636:	f7ff fed1 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800063a:	2012      	movs	r0, #18
 800063c:	f7ff fece 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000640:	2081      	movs	r0, #129	; 0x81
 8000642:	f7ff fecb 	bl	80003dc <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000646:	20f7      	movs	r0, #247	; 0xf7
 8000648:	f7ff fea8 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800064c:	2020      	movs	r0, #32
 800064e:	f7ff fec5 	bl	80003dc <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000652:	20c0      	movs	r0, #192	; 0xc0
 8000654:	f7ff fea2 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000658:	2023      	movs	r0, #35	; 0x23
 800065a:	f7ff febf 	bl	80003dc <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800065e:	20c1      	movs	r0, #193	; 0xc1
 8000660:	f7ff fe9c 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000664:	2010      	movs	r0, #16
 8000666:	f7ff feb9 	bl	80003dc <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800066a:	20c5      	movs	r0, #197	; 0xc5
 800066c:	f7ff fe96 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000670:	203e      	movs	r0, #62	; 0x3e
 8000672:	f7ff feb3 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000676:	2028      	movs	r0, #40	; 0x28
 8000678:	f7ff feb0 	bl	80003dc <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800067c:	20c7      	movs	r0, #199	; 0xc7
 800067e:	f7ff fe8d 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000682:	2086      	movs	r0, #134	; 0x86
 8000684:	f7ff feaa 	bl	80003dc <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000688:	2036      	movs	r0, #54	; 0x36
 800068a:	f7ff fe87 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800068e:	2048      	movs	r0, #72	; 0x48
 8000690:	f7ff fea4 	bl	80003dc <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000694:	203a      	movs	r0, #58	; 0x3a
 8000696:	f7ff fe81 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800069a:	2055      	movs	r0, #85	; 0x55
 800069c:	f7ff fe9e 	bl	80003dc <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80006a0:	20b1      	movs	r0, #177	; 0xb1
 80006a2:	f7ff fe7b 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff fe98 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80006ac:	2018      	movs	r0, #24
 80006ae:	f7ff fe95 	bl	80003dc <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80006b2:	20b6      	movs	r0, #182	; 0xb6
 80006b4:	f7ff fe72 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80006b8:	2008      	movs	r0, #8
 80006ba:	f7ff fe8f 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80006be:	2082      	movs	r0, #130	; 0x82
 80006c0:	f7ff fe8c 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80006c4:	2027      	movs	r0, #39	; 0x27
 80006c6:	f7ff fe89 	bl	80003dc <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80006ca:	20f2      	movs	r0, #242	; 0xf2
 80006cc:	f7ff fe66 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fe83 	bl	80003dc <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80006d6:	2026      	movs	r0, #38	; 0x26
 80006d8:	f7ff fe60 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff fe7d 	bl	80003dc <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80006e2:	20e0      	movs	r0, #224	; 0xe0
 80006e4:	f7ff fe5a 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80006e8:	200f      	movs	r0, #15
 80006ea:	f7ff fe77 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80006ee:	2031      	movs	r0, #49	; 0x31
 80006f0:	f7ff fe74 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80006f4:	202b      	movs	r0, #43	; 0x2b
 80006f6:	f7ff fe71 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80006fa:	200c      	movs	r0, #12
 80006fc:	f7ff fe6e 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000700:	200e      	movs	r0, #14
 8000702:	f7ff fe6b 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000706:	2008      	movs	r0, #8
 8000708:	f7ff fe68 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800070c:	204e      	movs	r0, #78	; 0x4e
 800070e:	f7ff fe65 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000712:	20f1      	movs	r0, #241	; 0xf1
 8000714:	f7ff fe62 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000718:	2037      	movs	r0, #55	; 0x37
 800071a:	f7ff fe5f 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800071e:	2007      	movs	r0, #7
 8000720:	f7ff fe5c 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000724:	2010      	movs	r0, #16
 8000726:	f7ff fe59 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800072a:	2003      	movs	r0, #3
 800072c:	f7ff fe56 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000730:	200e      	movs	r0, #14
 8000732:	f7ff fe53 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000736:	2009      	movs	r0, #9
 8000738:	f7ff fe50 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fe4d 	bl	80003dc <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000742:	20e1      	movs	r0, #225	; 0xe1
 8000744:	f7ff fe2a 	bl	800039c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff fe47 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800074e:	200e      	movs	r0, #14
 8000750:	f7ff fe44 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000754:	2014      	movs	r0, #20
 8000756:	f7ff fe41 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800075a:	2003      	movs	r0, #3
 800075c:	f7ff fe3e 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000760:	2011      	movs	r0, #17
 8000762:	f7ff fe3b 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000766:	2007      	movs	r0, #7
 8000768:	f7ff fe38 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800076c:	2031      	movs	r0, #49	; 0x31
 800076e:	f7ff fe35 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000772:	20c1      	movs	r0, #193	; 0xc1
 8000774:	f7ff fe32 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000778:	2048      	movs	r0, #72	; 0x48
 800077a:	f7ff fe2f 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800077e:	2008      	movs	r0, #8
 8000780:	f7ff fe2c 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000784:	200f      	movs	r0, #15
 8000786:	f7ff fe29 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800078a:	200c      	movs	r0, #12
 800078c:	f7ff fe26 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000790:	2031      	movs	r0, #49	; 0x31
 8000792:	f7ff fe23 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000796:	2036      	movs	r0, #54	; 0x36
 8000798:	f7ff fe20 	bl	80003dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800079c:	200f      	movs	r0, #15
 800079e:	f7ff fe1d 	bl	80003dc <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80007a2:	2011      	movs	r0, #17
 80007a4:	f7ff fdfa 	bl	800039c <ILI9341_Write_Command>
HAL_Delay(120);
 80007a8:	2078      	movs	r0, #120	; 0x78
 80007aa:	f000 fc77 	bl	800109c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80007ae:	2029      	movs	r0, #41	; 0x29
 80007b0:	f7ff fdf4 	bl	800039c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fe99 	bl	80004ec <ILI9341_Set_Rotation>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80007c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007c4:	b08d      	sub	sp, #52	; 0x34
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	6039      	str	r1, [r7, #0]
 80007cc:	80fb      	strh	r3, [r7, #6]
 80007ce:	466b      	mov	r3, sp
 80007d0:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007de:	d202      	bcs.n	80007e6 <ILI9341_Draw_Colour_Burst+0x26>
{
  Buffer_Size = Size;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007e4:	e002      	b.n	80007ec <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
  Buffer_Size = BURST_MAX_SIZE;
 80007e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
}

HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f000 ff05 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2104      	movs	r1, #4
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f000 feff 	bl	8001604 <HAL_GPIO_WritePin>

unsigned char chifted =   Colour>>8;;
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b29b      	uxth	r3, r3
 800080c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000812:	460b      	mov	r3, r1
 8000814:	3b01      	subs	r3, #1
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	2300      	movs	r3, #0
 800081a:	4688      	mov	r8, r1
 800081c:	4699      	mov	r9, r3
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800082a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800082e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000832:	2300      	movs	r3, #0
 8000834:	460c      	mov	r4, r1
 8000836:	461d      	mov	r5, r3
 8000838:	f04f 0200 	mov.w	r2, #0
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	00eb      	lsls	r3, r5, #3
 8000842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000846:	00e2      	lsls	r2, r4, #3
 8000848:	1dcb      	adds	r3, r1, #7
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	ebad 0d03 	sub.w	sp, sp, r3
 8000852:	466b      	mov	r3, sp
 8000854:	3300      	adds	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
 800085c:	e00e      	b.n	800087c <ILI9341_Draw_Colour_Burst+0xbc>
  {
    burst_buffer[j] =   chifted;
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000862:	4413      	add	r3, r2
 8000864:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000868:	701a      	strb	r2, [r3, #0]
    burst_buffer[j+1] = Colour;
 800086a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086c:	3301      	adds	r3, #1
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	b2d1      	uxtb	r1, r2
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	3302      	adds	r3, #2
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
 800087c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000880:	429a      	cmp	r2, r3
 8000882:	d3ec      	bcc.n	800085e <ILI9341_Draw_Colour_Burst+0x9e>
  }

uint32_t Sending_Size = Size*2;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000898:	fbb3 f2f2 	udiv	r2, r3, r2
 800089c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800089e:	fb01 f202 	mul.w	r2, r1, r2
 80008a2:	1a9b      	subs	r3, r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d010      	beq.n	80008ce <ILI9341_Draw_Colour_Burst+0x10e>
{
  for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
 80008b0:	e009      	b.n	80008c6 <ILI9341_Draw_Colour_Burst+0x106>
    {
    HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 80008b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	230a      	movs	r3, #10
 80008b8:	69b9      	ldr	r1, [r7, #24]
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <ILI9341_Draw_Colour_Burst+0x134>)
 80008bc:	f001 fd89 	bl	80023d2 <HAL_SPI_Transmit>
  for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80008c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c2:	3301      	adds	r3, #1
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
 80008c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d3f1      	bcc.n	80008b2 <ILI9341_Draw_Colour_Burst+0xf2>
    }
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	230a      	movs	r3, #10
 80008d4:	69b9      	ldr	r1, [r7, #24]
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <ILI9341_Draw_Colour_Burst+0x134>)
 80008d8:	f001 fd7b 	bl	80023d2 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2104      	movs	r1, #4
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fe8e 	bl	8001604 <HAL_GPIO_WritePin>
 80008e8:	46b5      	mov	sp, r6
}
 80008ea:	bf00      	nop
 80008ec:	3734      	adds	r7, #52	; 0x34
 80008ee:	46bd      	mov	sp, r7
 80008f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008f4:	2000002c 	.word	0x2000002c

080008f8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <ILI9341_Fill_Screen+0x44>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <ILI9341_Fill_Screen+0x48>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fd83 	bl	800041c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <ILI9341_Fill_Screen+0x44>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	b29b      	uxth	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <ILI9341_Fill_Screen+0x48>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	fb02 f303 	mul.w	r3, r2, r3
 8000928:	461a      	mov	r2, r3
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff46 	bl	80007c0 <ILI9341_Draw_Colour_Burst>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000002 	.word	0x20000002
 8000940:	20000000 	.word	0x20000000

08000944 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
 800094e:	460b      	mov	r3, r1
 8000950:	80bb      	strh	r3, [r7, #4]
 8000952:	4613      	mov	r3, r2
 8000954:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return; //OUT OF BOUNDS!
 8000956:	4b67      	ldr	r3, [pc, #412]	; (8000af4 <ILI9341_Draw_Pixel+0x1b0>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	88fa      	ldrh	r2, [r7, #6]
 800095e:	429a      	cmp	r2, r3
 8000960:	f080 80c4 	bcs.w	8000aec <ILI9341_Draw_Pixel+0x1a8>
 8000964:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <ILI9341_Draw_Pixel+0x1b4>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	88ba      	ldrh	r2, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	f080 80bd 	bcs.w	8000aec <ILI9341_Draw_Pixel+0x1a8>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f000 fe42 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2104      	movs	r1, #4
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f000 fe3c 	bl	8001604 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800098c:	202a      	movs	r0, #42	; 0x2a
 800098e:	f7ff fcf3 	bl	8000378 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fe32 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2104      	movs	r1, #4
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f000 fe2c 	bl	8001604 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2104      	movs	r1, #4
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f000 fe26 	bl	8001604 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	753b      	strb	r3, [r7, #20]
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	757b      	strb	r3, [r7, #21]
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	3301      	adds	r3, #1
 80009cc:	121b      	asrs	r3, r3, #8
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	75bb      	strb	r3, [r7, #22]
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80009dc:	f107 0114 	add.w	r1, r7, #20
 80009e0:	2301      	movs	r3, #1
 80009e2:	2204      	movs	r2, #4
 80009e4:	4845      	ldr	r0, [pc, #276]	; (8000afc <ILI9341_Draw_Pixel+0x1b8>)
 80009e6:	f001 fcf4 	bl	80023d2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2104      	movs	r1, #4
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f000 fe07 	bl	8001604 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 fe00 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2104      	movs	r1, #4
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fdfa 	bl	8001604 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000a10:	202b      	movs	r0, #43	; 0x2b
 8000a12:	f7ff fcb1 	bl	8000378 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f000 fdf0 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2104      	movs	r1, #4
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f000 fdea 	bl	8001604 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2104      	movs	r1, #4
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f000 fde4 	bl	8001604 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	743b      	strb	r3, [r7, #16]
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	747b      	strb	r3, [r7, #17]
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	121b      	asrs	r3, r3, #8
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	74bb      	strb	r3, [r7, #18]
 8000a56:	88bb      	ldrh	r3, [r7, #4]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000a60:	f107 0110 	add.w	r1, r7, #16
 8000a64:	2301      	movs	r3, #1
 8000a66:	2204      	movs	r2, #4
 8000a68:	4824      	ldr	r0, [pc, #144]	; (8000afc <ILI9341_Draw_Pixel+0x1b8>)
 8000a6a:	f001 fcb2 	bl	80023d2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2104      	movs	r1, #4
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f000 fdc5 	bl	8001604 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f000 fdbe 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f000 fdb8 	bl	8001604 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000a94:	202c      	movs	r0, #44	; 0x2c
 8000a96:	f7ff fc6f 	bl	8000378 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 fdae 	bl	8001604 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2104      	movs	r1, #4
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f000 fda8 	bl	8001604 <HAL_GPIO_WritePin>

//COLOUR
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f000 fda2 	bl	8001604 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	733b      	strb	r3, [r7, #12]
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000ad0:	f107 010c 	add.w	r1, r7, #12
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	4808      	ldr	r0, [pc, #32]	; (8000afc <ILI9341_Draw_Pixel+0x1b8>)
 8000ada:	f001 fc7a 	bl	80023d2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f000 fd8d 	bl	8001604 <HAL_GPIO_WritePin>
 8000aea:	e000      	b.n	8000aee <ILI9341_Draw_Pixel+0x1aa>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return; //OUT OF BOUNDS!
 8000aec:	bf00      	nop

}
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000002 	.word	0x20000002
 8000af8:	20000000 	.word	0x20000000
 8000afc:	2000002c 	.word	0x2000002c

08000b00 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4604      	mov	r4, r0
 8000b08:	4608      	mov	r0, r1
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4623      	mov	r3, r4
 8000b10:	80fb      	strh	r3, [r7, #6]
 8000b12:	4603      	mov	r3, r0
 8000b14:	80bb      	strh	r3, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	807b      	strh	r3, [r7, #2]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <ILI9341_Draw_Rectangle+0xb0>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	88fa      	ldrh	r2, [r7, #6]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d23d      	bcs.n	8000ba6 <ILI9341_Draw_Rectangle+0xa6>
 8000b2a:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <ILI9341_Draw_Rectangle+0xb4>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	88ba      	ldrh	r2, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d237      	bcs.n	8000ba6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000b36:	88fa      	ldrh	r2, [r7, #6]
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <ILI9341_Draw_Rectangle+0xb0>)
 8000b3e:	8812      	ldrh	r2, [r2, #0]
 8000b40:	b292      	uxth	r2, r2
 8000b42:	4293      	cmp	r3, r2
 8000b44:	dd05      	ble.n	8000b52 <ILI9341_Draw_Rectangle+0x52>
  {
    Width=LCD_WIDTH-X;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <ILI9341_Draw_Rectangle+0xb0>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	807b      	strh	r3, [r7, #2]
  }
if((Y+Height-1)>=LCD_HEIGHT)
 8000b52:	88ba      	ldrh	r2, [r7, #4]
 8000b54:	883b      	ldrh	r3, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <ILI9341_Draw_Rectangle+0xb4>)
 8000b5a:	8812      	ldrh	r2, [r2, #0]
 8000b5c:	b292      	uxth	r2, r2
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	dd05      	ble.n	8000b6e <ILI9341_Draw_Rectangle+0x6e>
  {
    Height=LCD_HEIGHT-Y;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <ILI9341_Draw_Rectangle+0xb4>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	803b      	strh	r3, [r7, #0]
  }
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000b6e:	88fa      	ldrh	r2, [r7, #6]
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	3b01      	subs	r3, #1
 8000b78:	b29c      	uxth	r4, r3
 8000b7a:	88ba      	ldrh	r2, [r7, #4]
 8000b7c:	883b      	ldrh	r3, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3b01      	subs	r3, #1
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	88b9      	ldrh	r1, [r7, #4]
 8000b88:	88f8      	ldrh	r0, [r7, #6]
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	f7ff fc46 	bl	800041c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	8b3b      	ldrh	r3, [r7, #24]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe0e 	bl	80007c0 <ILI9341_Draw_Colour_Burst>
 8000ba4:	e000      	b.n	8000ba8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000ba6:	bf00      	nop
}
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000002 	.word	0x20000002
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b37      	ldr	r3, [pc, #220]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a36      	ldr	r2, [pc, #216]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a2a      	ldr	r2, [pc, #168]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ILI9341_CS_Pin|ILI9341_DC_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f248 0104 	movw	r1, #32772	; 0x8004
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f000 fcf0 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2110      	movs	r1, #16
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f000 fcea 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_RST_GPIO_Port, ILI9341_RST_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2110      	movs	r1, #16
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f000 fce4 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000c44:	f000 fcde 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA4 PAPin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|GPIO_PIN_4|ILI9341_DC_Pin;
 8000c48:	f248 0314 	movw	r3, #32788	; 0x8014
 8000c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fb24 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ILI9341_RST_Pin;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ILI9341_RST_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f000 fb15 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_GPIO_Init+0xf8>)
 8000ca0:	f000 fb06 	bl	80012b0 <HAL_GPIO_Init>

}
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000c00 	.word	0x48000c00

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cba:	f000 f97a 	bl	8000fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbe:	f000 f817 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc2:	f7ff ff79 	bl	8000bb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cc6:	f000 f86b 	bl	8000da0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000cca:	f7ff fc6b 	bl	80005a4 <ILI9341_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ILI9341_Fill_Screen(BLACK);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fe12 	bl	80008f8 <ILI9341_Fill_Screen>
  ILI9341_Draw_Text("hello", 10, 10, BLACK, 1, WHITE);
 8000cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	210a      	movs	r1, #10
 8000ce4:	4801      	ldr	r0, [pc, #4]	; (8000cec <main+0x38>)
 8000ce6:	f7ff fb09 	bl	80002fc <ILI9341_Draw_Text>

  while (1)
 8000cea:	e7fe      	b.n	8000cea <main+0x36>
 8000cec:	080029f4 	.word	0x080029f4

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b096      	sub	sp, #88	; 0x58
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2244      	movs	r2, #68	; 0x44
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fe40 	bl	8002984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d16:	f000 fc9b 	bl	8001650 <HAL_PWREx_ControlVoltageScaling>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d20:	f000 f838 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d24:	2310      	movs	r3, #16
 8000d26:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d30:	2360      	movs	r3, #96	; 0x60
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d34:	2302      	movs	r3, #2
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d40:	2328      	movs	r3, #40	; 0x28
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d44:	2307      	movs	r3, #7
 8000d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fcd1 	bl	80016fc <HAL_RCC_OscConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d60:	f000 f818 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d64:	230f      	movs	r3, #15
 8000d66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 f899 	bl	8001eb4 <HAL_RCC_ClockConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d88:	f000 f804 	bl	8000d94 <Error_Handler>
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3758      	adds	r7, #88	; 0x58
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <MX_SPI1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dee:	2207      	movs	r2, #7
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000e00:	f001 fa44 	bl	800228c <HAL_SPI_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f7ff ffc3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000002c 	.word	0x2000002c
 8000e18:	40013000 	.word	0x40013000

08000e1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_SPI_MspInit+0x7c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d128      	bne.n	8000e90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_SPI_MspInit+0x80>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <HAL_SPI_MspInit+0x80>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_SPI_MspInit+0x80>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_SPI_MspInit+0x80>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_SPI_MspInit+0x80>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_SPI_MspInit+0x80>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ILI9341_SCK_Pin|ILI9341_MISO_Pin|ILI9341_MOSI_Pin;
 8000e6e:	23e0      	movs	r3, #224	; 0xe0
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f000 fa10 	bl	80012b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f892 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f64:	f7ff ffea 	bl	8000f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopForever+0xe>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopForever+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f001 fd01 	bl	8002994 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f92:	f7ff fe8f 	bl	8000cb4 <main>

08000f96 <LoopForever>:

LoopForever:
    b LoopForever
 8000f96:	e7fe      	b.n	8000f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fa4:	08002c84 	.word	0x08002c84
  ldr r2, =_sbss
 8000fa8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fac:	20000094 	.word	0x20000094

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>

08000fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f943 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f80e 	bl	8000fe4 <HAL_InitTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	e001      	b.n	8000fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fd4:	f7ff ff64 	bl	8000ea0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_InitTick+0x6c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d023      	beq.n	8001040 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_InitTick+0x70>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_InitTick+0x6c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f941 	bl	8001296 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10f      	bne.n	800103a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d809      	bhi.n	8001034 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f919 	bl	800125e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_InitTick+0x74>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e007      	b.n	8001044 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e004      	b.n	8001044 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e001      	b.n	8001044 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	20000004 	.word	0x20000004
 8001058:	20000008 	.word	0x20000008

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000000c 	.word	0x2000000c
 8001080:	20000090 	.word	0x20000090

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000090 	.word	0x20000090

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000000c 	.word	0x2000000c

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff47 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff5c 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffb0 	bl	8001204 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	e17f      	b.n	80015c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	4013      	ands	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8171 	beq.w	80015ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d005      	beq.n	80012f0 <HAL_GPIO_Init+0x40>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d130      	bne.n	8001352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001326:	2201      	movs	r2, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 0201 	and.w	r2, r3, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b03      	cmp	r3, #3
 800135c:	d118      	bne.n	8001390 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b03      	cmp	r3, #3
 800139a:	d017      	beq.n	80013cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d123      	bne.n	8001420 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	6939      	ldr	r1, [r7, #16]
 800141c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80ac 	beq.w	80015ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <HAL_GPIO_Init+0x330>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001466:	4a5e      	ldr	r2, [pc, #376]	; (80015e0 <HAL_GPIO_Init+0x330>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6613      	str	r3, [r2, #96]	; 0x60
 800146e:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <HAL_GPIO_Init+0x330>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800147a:	4a5a      	ldr	r2, [pc, #360]	; (80015e4 <HAL_GPIO_Init+0x334>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014a4:	d025      	beq.n	80014f2 <HAL_GPIO_Init+0x242>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4f      	ldr	r2, [pc, #316]	; (80015e8 <HAL_GPIO_Init+0x338>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01f      	beq.n	80014ee <HAL_GPIO_Init+0x23e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4e      	ldr	r2, [pc, #312]	; (80015ec <HAL_GPIO_Init+0x33c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x23a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4d      	ldr	r2, [pc, #308]	; (80015f0 <HAL_GPIO_Init+0x340>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x236>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4c      	ldr	r2, [pc, #304]	; (80015f4 <HAL_GPIO_Init+0x344>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x232>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4b      	ldr	r2, [pc, #300]	; (80015f8 <HAL_GPIO_Init+0x348>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x22e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4a      	ldr	r2, [pc, #296]	; (80015fc <HAL_GPIO_Init+0x34c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x22a>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014da:	2307      	movs	r3, #7
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014f2:	2300      	movs	r3, #0
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001504:	4937      	ldr	r1, [pc, #220]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_GPIO_Init+0x350>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_GPIO_Init+0x350>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_GPIO_Init+0x350>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_GPIO_Init+0x350>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_GPIO_Init+0x350>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_GPIO_Init+0x350>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_GPIO_Init+0x350>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_GPIO_Init+0x350>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f47f ae78 	bne.w	80012c0 <HAL_GPIO_Init+0x10>
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000
 80015e8:	48000400 	.word	0x48000400
 80015ec:	48000800 	.word	0x48000800
 80015f0:	48000c00 	.word	0x48000c00
 80015f4:	48001000 	.word	0x48001000
 80015f8:	48001400 	.word	0x48001400
 80015fc:	48001800 	.word	0x48001800
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001620:	e002      	b.n	8001628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <HAL_PWREx_GetVoltageRange+0x18>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000

08001650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165e:	d130      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800166c:	d038      	beq.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001676:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2232      	movs	r2, #50	; 0x32
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0c9b      	lsrs	r3, r3, #18
 8001690:	3301      	adds	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001694:	e002      	b.n	800169c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3b01      	subs	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a8:	d102      	bne.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f2      	bne.n	8001696 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016bc:	d110      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e00f      	b.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ce:	d007      	beq.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d8:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40007000 	.word	0x40007000
 80016f4:	20000004 	.word	0x20000004
 80016f8:	431bde83 	.word	0x431bde83

080016fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e3ca      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170e:	4b97      	ldr	r3, [pc, #604]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001718:	4b94      	ldr	r3, [pc, #592]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80e4 	beq.w	80018f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_RCC_OscConfig+0x4a>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	f040 808b 	bne.w	8001854 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b01      	cmp	r3, #1
 8001742:	f040 8087 	bne.w	8001854 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001746:	4b89      	ldr	r3, [pc, #548]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x62>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e3a2      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	4b82      	ldr	r3, [pc, #520]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <HAL_RCC_OscConfig+0x7c>
 800176e:	4b7f      	ldr	r3, [pc, #508]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001776:	e005      	b.n	8001784 <HAL_RCC_OscConfig+0x88>
 8001778:	4b7c      	ldr	r3, [pc, #496]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001784:	4293      	cmp	r3, r2
 8001786:	d223      	bcs.n	80017d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fd1d 	bl	80021cc <RCC_SetFlashLatencyFromMSIRange>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e383      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179c:	4b73      	ldr	r3, [pc, #460]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a72      	ldr	r2, [pc, #456]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b70      	ldr	r3, [pc, #448]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	496d      	ldr	r1, [pc, #436]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ba:	4b6c      	ldr	r3, [pc, #432]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	4968      	ldr	r1, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
 80017ce:	e025      	b.n	800181c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d0:	4b66      	ldr	r3, [pc, #408]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a65      	ldr	r2, [pc, #404]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4960      	ldr	r1, [pc, #384]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ee:	4b5f      	ldr	r3, [pc, #380]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	495b      	ldr	r1, [pc, #364]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fcdd 	bl	80021cc <RCC_SetFlashLatencyFromMSIRange>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e343      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800181c:	f000 fc4a 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	4b52      	ldr	r3, [pc, #328]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	4950      	ldr	r1, [pc, #320]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800183a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800183c:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fbcf 	bl	8000fe4 <HAL_InitTick>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d052      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	e327      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d032      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a42      	ldr	r2, [pc, #264]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001868:	f7ff fc0c 	bl	8001084 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001870:	f7ff fc08 	bl	8001084 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e310      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001882:	4b3a      	ldr	r3, [pc, #232]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a36      	ldr	r2, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4931      	ldr	r1, [pc, #196]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	492c      	ldr	r1, [pc, #176]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	e01a      	b.n	80018f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ce:	f7ff fbd9 	bl	8001084 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d6:	f7ff fbd5 	bl	8001084 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e2dd      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x1da>
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d074      	beq.n	80019ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b08      	cmp	r3, #8
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x21a>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b0c      	cmp	r3, #12
 800190e:	d10e      	bne.n	800192e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d10b      	bne.n	800192e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d064      	beq.n	80019ec <HAL_RCC_OscConfig+0x2f0>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d160      	bne.n	80019ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e2ba      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x24a>
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e026      	b.n	8001994 <HAL_RCC_OscConfig+0x298>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194e:	d115      	bne.n	800197c <HAL_RCC_OscConfig+0x280>
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a02      	ldr	r2, [pc, #8]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e014      	b.n	8001994 <HAL_RCC_OscConfig+0x298>
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	08002c3c 	.word	0x08002c3c
 8001974:	20000004 	.word	0x20000004
 8001978:	20000008 	.word	0x20000008
 800197c:	4ba0      	ldr	r3, [pc, #640]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a9f      	ldr	r2, [pc, #636]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b9d      	ldr	r3, [pc, #628]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a9c      	ldr	r2, [pc, #624]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fb72 	bl	8001084 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fb6e 	bl	8001084 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e276      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b6:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x2a8>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb5e 	bl	8001084 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fb5a 	bl	8001084 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e262      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019de:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x2d0>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d060      	beq.n	8001abc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x310>
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d119      	bne.n	8001a3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d116      	bne.n	8001a3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0c:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_OscConfig+0x328>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e23f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b76      	ldr	r3, [pc, #472]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	4973      	ldr	r1, [pc, #460]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a38:	e040      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d023      	beq.n	8001a8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a42:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6e      	ldr	r2, [pc, #440]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fb19 	bl	8001084 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fb15 	bl	8001084 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e21d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a68:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	495f      	ldr	r1, [pc, #380]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e018      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5c      	ldr	r2, [pc, #368]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff faf5 	bl	8001084 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff faf1 	bl	8001084 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1f9      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d03c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad0:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad6:	4a4a      	ldr	r2, [pc, #296]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fad0 	bl	8001084 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff facc 	bl	8001084 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1d4      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ef      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x3ec>
 8001b08:	e01b      	b.n	8001b42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b10:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fab3 	bl	8001084 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b22:	f7ff faaf 	bl	8001084 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1b7      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ef      	bne.n	8001b22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80a6 	beq.w	8001c9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10d      	bne.n	8001b7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d118      	bne.n	8001bba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_RCC_OscConfig+0x508>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x508>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa76 	bl	8001084 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7ff fa72 	bl	8001084 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e17a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_RCC_OscConfig+0x508>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4d8>
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd2:	e029      	b.n	8001c28 <HAL_RCC_OscConfig+0x52c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d115      	bne.n	8001c08 <HAL_RCC_OscConfig+0x50c>
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfc:	e014      	b.n	8001c28 <HAL_RCC_OscConfig+0x52c>
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40007000 	.word	0x40007000
 8001c08:	4b9c      	ldr	r3, [pc, #624]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	4a9b      	ldr	r2, [pc, #620]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c18:	4b98      	ldr	r3, [pc, #608]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	4a97      	ldr	r2, [pc, #604]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d016      	beq.n	8001c5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff fa28 	bl	8001084 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7ff fa24 	bl	8001084 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e12a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4e:	4b8b      	ldr	r3, [pc, #556]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ed      	beq.n	8001c38 <HAL_RCC_OscConfig+0x53c>
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fa11 	bl	8001084 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7ff fa0d 	bl	8001084 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e113      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c7c:	4b7f      	ldr	r3, [pc, #508]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ed      	bne.n	8001c66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80fe 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	f040 80d0 	bne.w	8001e50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cb0:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d130      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d127      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d11f      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cf0:	2a07      	cmp	r2, #7
 8001cf2:	bf14      	ite	ne
 8001cf4:	2201      	movne	r2, #1
 8001cf6:	2200      	moveq	r2, #0
 8001cf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d113      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	085b      	lsrs	r3, r3, #1
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d06e      	beq.n	8001e04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d069      	beq.n	8001e00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d2c:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d38:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0ad      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d54:	f7ff f996 	bl	8001084 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f992 	bl	8001084 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e09a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d8a:	3a01      	subs	r2, #1
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d94:	0212      	lsls	r2, r2, #8
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d9c:	0852      	lsrs	r2, r2, #1
 8001d9e:	3a01      	subs	r2, #1
 8001da0:	0552      	lsls	r2, r2, #21
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001da8:	0852      	lsrs	r2, r2, #1
 8001daa:	3a01      	subs	r2, #1
 8001dac:	0652      	lsls	r2, r2, #25
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db4:	0912      	lsrs	r2, r2, #4
 8001db6:	0452      	lsls	r2, r2, #17
 8001db8:	430a      	orrs	r2, r1
 8001dba:	4930      	ldr	r1, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a2d      	ldr	r2, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd8:	f7ff f954 	bl	8001084 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f950 	bl	8001084 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e058      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfe:	e050      	b.n	8001ea2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d148      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e28:	f7ff f92c 	bl	8001084 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff f928 	bl	8001084 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e030      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x734>
 8001e4e:	e028      	b.n	8001ea2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d023      	beq.n	8001e9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x780>)
 8001e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff f90f 	bl	8001084 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e68:	e00c      	b.n	8001e84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff f90b 	bl	8001084 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d905      	bls.n	8001e84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_OscConfig+0x7b0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ec      	bne.n	8001e6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x7b0>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4905      	ldr	r1, [pc, #20]	; (8001eac <HAL_RCC_OscConfig+0x7b0>)
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_OscConfig+0x7b4>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e001      	b.n	8001ea2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	feeefffc 	.word	0xfeeefffc

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0e7      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4970      	ldr	r1, [pc, #448]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0cf      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d010      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d908      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4960      	ldr	r1, [pc, #384]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04c      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d121      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0a6      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e09a      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6a:	4b4e      	ldr	r3, [pc, #312]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e08e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e086      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4943      	ldr	r1, [pc, #268]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9c:	f7ff f872 	bl	8001084 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff f86e 	bl	8001084 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e06e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	492b      	ldr	r1, [pc, #172]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffa:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d210      	bcs.n	800202a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	4923      	ldr	r1, [pc, #140]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e036      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4918      	ldr	r1, [pc, #96]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4910      	ldr	r1, [pc, #64]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002068:	f000 f824 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	490b      	ldr	r1, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1f4>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1fc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe ffa9 	bl	8000fe4 <HAL_InitTick>
 8002092:	4603      	mov	r3, r0
 8002094:	72fb      	strb	r3, [r7, #11]

  return status;
 8002096:	7afb      	ldrb	r3, [r7, #11]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08002c3c 	.word	0x08002c3c
 80020ac:	20000004 	.word	0x20000004
 80020b0:	20000008 	.word	0x20000008

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x34>
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d11e      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e005      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002124:	e00a      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d102      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e004      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d101      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002138:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800213a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d134      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0xa6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xac>
 8002158:	e005      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	e005      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002162:	617b      	str	r3, [r7, #20]
      break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	617b      	str	r3, [r7, #20]
      break;
 800216a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	3301      	adds	r3, #1
 8002178:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	0e5b      	lsrs	r3, r3, #25
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	3301      	adds	r3, #1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021ac:	69bb      	ldr	r3, [r7, #24]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08002c4c 	.word	0x08002c4c
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200

080021cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff fa26 	bl	8001634 <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
 80021ea:	e014      	b.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a24      	ldr	r2, [pc, #144]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002204:	f7ff fa16 	bl	8001634 <HAL_PWREx_GetVoltageRange>
 8002208:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002214:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800221c:	d10b      	bne.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d919      	bls.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2ba0      	cmp	r3, #160	; 0xa0
 8002228:	d902      	bls.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800222a:	2302      	movs	r3, #2
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e013      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002230:	2301      	movs	r3, #1
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e010      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d902      	bls.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800223c:	2303      	movs	r3, #3
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	e00a      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d102      	bne.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002248:	2302      	movs	r3, #2
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e004      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b70      	cmp	r3, #112	; 0x70
 8002252:	d101      	bne.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 0207 	bic.w	r2, r3, #7
 8002260:	4909      	ldr	r1, [pc, #36]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	429a      	cmp	r2, r3
 8002274:	d001      	beq.n	800227a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	40022000 	.word	0x40022000

0800228c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e095      	b.n	80023ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ae:	d009      	beq.n	80022c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
 80022b6:	e005      	b.n	80022c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fd9c 	bl	8000e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002304:	d902      	bls.n	800230c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	e002      	b.n	8002312 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800230c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002310:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800231a:	d007      	beq.n	800232c <HAL_SPI_Init+0xa0>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002324:	d002      	beq.n	800232c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	ea42 0103 	orr.w	r1, r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	f003 0204 	and.w	r2, r3, #4
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80023a8:	ea42 0103 	orr.w	r1, r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b088      	sub	sp, #32
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_SPI_Transmit+0x22>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e15f      	b.n	80026b4 <HAL_SPI_Transmit+0x2e2>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023fc:	f7fe fe42 	bl	8001084 <HAL_GetTick>
 8002400:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d002      	beq.n	8002418 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002416:	e148      	b.n	80026aa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_SPI_Transmit+0x52>
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002428:	e13f      	b.n	80026aa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2203      	movs	r2, #3
 800242e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002474:	d10f      	bne.n	8002496 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002484:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002494:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d007      	beq.n	80024b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024bc:	d94f      	bls.n	800255e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_SPI_Transmit+0xfa>
 80024c6:	8afb      	ldrh	r3, [r7, #22]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d142      	bne.n	8002552 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	1c9a      	adds	r2, r3, #2
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024f0:	e02f      	b.n	8002552 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d112      	bne.n	8002526 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	881a      	ldrh	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	1c9a      	adds	r2, r3, #2
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002524:	e015      	b.n	8002552 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002526:	f7fe fdad 	bl	8001084 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d803      	bhi.n	800253e <HAL_SPI_Transmit+0x16c>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d102      	bne.n	8002544 <HAL_SPI_Transmit+0x172>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002550:	e0ab      	b.n	80026aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ca      	bne.n	80024f2 <HAL_SPI_Transmit+0x120>
 800255c:	e080      	b.n	8002660 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_SPI_Transmit+0x19a>
 8002566:	8afb      	ldrh	r3, [r7, #22]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d174      	bne.n	8002656 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d912      	bls.n	800259c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	1c9a      	adds	r2, r3, #2
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b02      	subs	r3, #2
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	87da      	strh	r2, [r3, #62]	; 0x3e
 800259a:	e05c      	b.n	8002656 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025c2:	e048      	b.n	8002656 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d12b      	bne.n	800262a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d912      	bls.n	8002602 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	881a      	ldrh	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ec:	1c9a      	adds	r2, r3, #2
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b02      	subs	r3, #2
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002600:	e029      	b.n	8002656 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002628:	e015      	b.n	8002656 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262a:	f7fe fd2b 	bl	8001084 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d803      	bhi.n	8002642 <HAL_SPI_Transmit+0x270>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d102      	bne.n	8002648 <HAL_SPI_Transmit+0x276>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002654:	e029      	b.n	80026aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1b1      	bne.n	80025c4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f947 	bl	80028f8 <SPI_EndRxTxTransaction>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	e003      	b.n	80026aa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026cc:	f7fe fcda 	bl	8001084 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026dc:	f7fe fcd2 	bl	8001084 <HAL_GetTick>
 80026e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	0d1b      	lsrs	r3, r3, #20
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f2:	e054      	b.n	800279e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d050      	beq.n	800279e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026fc:	f7fe fcc2 	bl	8001084 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	429a      	cmp	r2, r3
 800270a:	d902      	bls.n	8002712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d13d      	bne.n	800278e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800272a:	d111      	bne.n	8002750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002734:	d004      	beq.n	8002740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273e:	d107      	bne.n	8002750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002758:	d10f      	bne.n	800277a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e017      	b.n	80027be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3b01      	subs	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d19b      	bne.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000004 	.word	0x20000004

080027cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80027de:	f7fe fc51 	bl	8001084 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80027ee:	f7fe fc49 	bl	8001084 <HAL_GetTick>
 80027f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80027fc:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00da      	lsls	r2, r3, #3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	0d1b      	lsrs	r3, r3, #20
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002814:	e060      	b.n	80028d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800281c:	d107      	bne.n	800282e <SPI_WaitFifoStateUntilTimeout+0x62>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800282c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d050      	beq.n	80028d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002836:	f7fe fc25 	bl	8001084 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	429a      	cmp	r2, r3
 8002844:	d902      	bls.n	800284c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d13d      	bne.n	80028c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800285a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002864:	d111      	bne.n	800288a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286e:	d004      	beq.n	800287a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002878:	d107      	bne.n	800288a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002888:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	d10f      	bne.n	80028b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e010      	b.n	80028ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d196      	bne.n	8002816 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3728      	adds	r7, #40	; 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000004 	.word	0x20000004

080028f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff ff5b 	bl	80027cc <SPI_WaitFifoStateUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e027      	b.n	800297c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2200      	movs	r2, #0
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff fec0 	bl	80026bc <SPI_WaitFlagStateUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e014      	b.n	800297c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff ff34 	bl	80027cc <SPI_WaitFifoStateUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	f043 0220 	orr.w	r2, r3, #32
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e000      	b.n	800297c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <memset>:
 8002984:	4402      	add	r2, r0
 8002986:	4603      	mov	r3, r0
 8002988:	4293      	cmp	r3, r2
 800298a:	d100      	bne.n	800298e <memset+0xa>
 800298c:	4770      	bx	lr
 800298e:	f803 1b01 	strb.w	r1, [r3], #1
 8002992:	e7f9      	b.n	8002988 <memset+0x4>

08002994 <__libc_init_array>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	4d0d      	ldr	r5, [pc, #52]	; (80029cc <__libc_init_array+0x38>)
 8002998:	4c0d      	ldr	r4, [pc, #52]	; (80029d0 <__libc_init_array+0x3c>)
 800299a:	1b64      	subs	r4, r4, r5
 800299c:	10a4      	asrs	r4, r4, #2
 800299e:	2600      	movs	r6, #0
 80029a0:	42a6      	cmp	r6, r4
 80029a2:	d109      	bne.n	80029b8 <__libc_init_array+0x24>
 80029a4:	4d0b      	ldr	r5, [pc, #44]	; (80029d4 <__libc_init_array+0x40>)
 80029a6:	4c0c      	ldr	r4, [pc, #48]	; (80029d8 <__libc_init_array+0x44>)
 80029a8:	f000 f818 	bl	80029dc <_init>
 80029ac:	1b64      	subs	r4, r4, r5
 80029ae:	10a4      	asrs	r4, r4, #2
 80029b0:	2600      	movs	r6, #0
 80029b2:	42a6      	cmp	r6, r4
 80029b4:	d105      	bne.n	80029c2 <__libc_init_array+0x2e>
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029bc:	4798      	blx	r3
 80029be:	3601      	adds	r6, #1
 80029c0:	e7ee      	b.n	80029a0 <__libc_init_array+0xc>
 80029c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c6:	4798      	blx	r3
 80029c8:	3601      	adds	r6, #1
 80029ca:	e7f2      	b.n	80029b2 <__libc_init_array+0x1e>
 80029cc:	08002c7c 	.word	0x08002c7c
 80029d0:	08002c7c 	.word	0x08002c7c
 80029d4:	08002c7c 	.word	0x08002c7c
 80029d8:	08002c80 	.word	0x08002c80

080029dc <_init>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr

080029e8 <_fini>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr
